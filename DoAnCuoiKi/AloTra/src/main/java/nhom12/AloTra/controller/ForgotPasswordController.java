package nhom12.AloTra.controller;

import nhom12.AloTra.service.OtpService;
import nhom12.AloTra.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ForgotPasswordController {

    @Autowired
    private UserService userService;

    @Autowired
    private OtpService otpService;

    /**
     * Hi·ªÉn th·ªã trang nh·∫≠p email ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√™n m·∫≠t kh·∫©u.
     */
    @GetMapping("/forgot-password")
    public String showForgotPasswordForm() {
        return "user/account/forgot-password";
    }

    /**
     * X·ª≠ l√Ω vi·ªác g·ª≠i email, t·∫°o v√† g·ª≠i m√£ OTP.
     */
    @PostMapping("/forgot-password")
    public String processForgotPassword(@RequestParam("email") String email,
                                        RedirectAttributes redirectAttributes,
                                        Model model) {
        try {
            userService.sendResetPasswordOtp(email);
            model.addAttribute("email", email);
            return "user/account/verify-reset-password";
        } catch (RuntimeException e) {
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            return "redirect:/forgot-password";
        }
    }

    /**
     * Hi·ªÉn th·ªã trang x√°c th·ª±c OTP.
     */
    @GetMapping("/verify-reset-password")
    public String showVerifyResetPasswordForm(@RequestParam("email") String email, Model model) {
        model.addAttribute("email", email);
        return "user/account/verify-reset-password";
    }

    /**
     * X·ª≠ l√Ω x√°c th·ª±c m√£ OTP ng∆∞·ªùi d√πng nh·∫≠p v√†o.
     */
    @PostMapping("/verify-reset-password")
    public String verifyResetPasswordOtp(@RequestParam("email") String email,
                                         @RequestParam("otp") String otp,
                                         RedirectAttributes redirectAttributes,
                                         Model model) {
        try {
            boolean isValid = userService.verifyResetPasswordOtp(email, otp);
            if (isValid) {
                model.addAttribute("email", email);
                return "user/account/reset-password";
            } else {
                redirectAttributes.addFlashAttribute("error", "M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
                redirectAttributes.addFlashAttribute("email", email);
                return "redirect:/verify-reset-password?email=" + email;
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            return "redirect:/verify-reset-password?email=" + email;
        }
    }

    /**
     * Hi·ªÉn th·ªã trang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi (sau khi ƒë√£ x√°c th·ª±c OTP th√†nh c√¥ng).
     */
    @GetMapping("/reset-password")
    public String showResetPasswordForm(@RequestParam("email") String email, Model model) {
        model.addAttribute("email", email);
        return "user/account/reset-password";
    }

    /**
     * ‚úÖ X·ª¨ L√ù L∆ØU M·∫¨T KH·∫®U M·ªöI
     */
    @PostMapping("/reset-password")
    public String processResetPassword(@RequestParam("email") String email,
                                       @RequestParam("password") String password,
                                       @RequestParam("confirm") String confirm,
                                       RedirectAttributes redirectAttributes) {
        System.out.println("========== X·ª¨ L√ù RESET PASSWORD T·ª™ FORM ==========");
        System.out.println("üìß Email t·ª´ form: " + email);
        System.out.println("üîë Password t·ª´ form: " + password);
        System.out.println("üîë Confirm t·ª´ form: " + confirm);
        
        try {
            if (!password.equals(confirm)) {
                throw new RuntimeException("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            }
            if (password.length() < 6) {
                throw new RuntimeException("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
            }
            
            userService.resetPassword(email, password);
            
            redirectAttributes.addFlashAttribute("success", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
            return "redirect:/sign-in";
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI TRONG CONTROLLER: " + e.getMessage());
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            redirectAttributes.addFlashAttribute("email", email);
            return "redirect:/reset-password?email=" + email;
        }
    }

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu g·ª≠i l·∫°i m√£ OTP.
     */
    @GetMapping("/resend-reset-otp")
    public String resendResetOtp(@RequestParam("email") String email,
                                 RedirectAttributes redirectAttributes) {
        try {
            otpService.generateOtpForEmail(email, "Qu√™n m·∫≠t kh·∫©u");
            redirectAttributes.addFlashAttribute("success", "ƒê√£ g·ª≠i l·∫°i m√£ OTP. Vui l√≤ng ki·ªÉm tra email!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Kh√¥ng th·ªÉ g·ª≠i l·∫°i OTP. Vui l√≤ng th·ª≠ l·∫°i!");
        }
        return "redirect:/verify-reset-password?email=" + email;
    }
}